import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as e}from"./app-DImQijK3.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="求一个数字最接近的2的n次幂" tabindex="-1"><a class="header-anchor" href="#求一个数字最接近的2的n次幂"><span>求一个数字最接近的2的N次幂</span></a></h1><p>给定一个正整数<code>n</code>，现有正整数<code>x</code>，<code>x</code>满足以下条件：</p><ul><li><code>x</code> &gt;= <code>n</code></li><li><code>x</code> 是 2的N次幂</li></ul><p>求<code>x</code>的最小值。</p><p>例如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>input: n = 6</span></span>
<span class="line"><span>output: 8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>input: n = 8</span></span>
<span class="line"><span>output: 8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>input: n = 20</span></span>
<span class="line"><span>output: 32</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk8的hashmap中的实现" tabindex="-1"><a class="header-anchor" href="#jdk8的hashmap中的实现"><span>JDK8的HashMap中的实现</span></a></h2><p><code>HashMap</code>会把构造函数中用户输入的<code>capacity</code>向上取到最接近的2的n次幂。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Returns a power of two size for the given target capacity.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tableSizeFor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cap) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> MAXIMUM_CAPACITY) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> MAXIMUM_CAPACITY </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java移位运算符解释" tabindex="-1"><a class="header-anchor" href="#java移位运算符解释"><span>Java移位运算符解释</span></a></h3><h4 id="左移运算符" tabindex="-1"><a class="header-anchor" href="#左移运算符"><span>左移运算符：&lt;&lt;</span></a></h4><p>丢弃左边指定位数，右边补0。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>Integer.MIN_VALUE == 0x80000000</span></span>
<span class="line"><span>(Integer.MIN_VALUE &lt;&lt; 1) == 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-1 == 0xffffffff</span></span>
<span class="line"><span>-1 &lt;&lt; 1 == -2 // -2 == 0xfffffffe</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1 &lt;&lt; 1 == 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="右移运算符" tabindex="-1"><a class="header-anchor" href="#右移运算符"><span>右移运算符：&gt;&gt;</span></a></h4><p>丢弃右边指定位数，左边补上符号位。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>4 &gt;&gt; 1 == 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0x80000000 &gt;&gt; 1 == 0xc0000000</span></span>
<span class="line"><span>0xffffffff &gt;&gt; 1 == 0xffffffff</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="无符号右移运算符" tabindex="-1"><a class="header-anchor" href="#无符号右移运算符"><span>无符号右移运算符：&gt;&gt;&gt;</span></a></h4><p>丢弃右边指定位数，左边补上0。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>4 &gt;&gt; 1 == 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0x80000000 &gt;&gt; 1 == 0x40000000</span></span>
<span class="line"><span>0xffffffff &gt;&gt; 1 == 0x7fffffff</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="算法解释" tabindex="-1"><a class="header-anchor" href="#算法解释"><span>算法解释</span></a></h2><p>对于一个32位整数</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>0000 0100 1000 0100 0000 0000 0000 0000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>把最左边的<code>1</code>之后的位都填充为<code>1</code></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>0000 0111 1111 1111 1111 1111 1111 1111</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后再对这个数字+1</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>0000 1000 0000 0000 0000 0000 0000 0000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得出的这个数字，就是最接近的2的N次幂。如果这个数字本身就是2的N次幂，那么得出的数字就是2的N+1次幂，所以可以对原数字<code>-1</code>后再位运算。</p><p>如果求的是小于等于n的最接近2的N次幂，只需要把上面的结果向右移一位。这种情况不需要对原数字<code>-1</code>。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>0000 0100 0000 0000 0000 0000 0000 0000 // 向右移一位</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么要怎么在最左边的1后填充0呢？</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>0000 0100 1000 0100 0000 0000 0000 0000</span></span>
<span class="line"><span>0000 0110 1100 0110 0000 0000 0000 0000 // n | (n &gt;&gt;&gt; 1)</span></span>
<span class="line"><span>0000 0111 1111 0111 1000 0000 0000 0000 // n | (n &gt;&gt;&gt; 2)</span></span>
<span class="line"><span>0000 0111 1111 1111 1111 1000 0000 0000 // n | (n &gt;&gt;&gt; 4)</span></span>
<span class="line"><span>0000 0111 1111 1111 1111 1111 1111 1000 // n | (n &gt;&gt;&gt; 8)</span></span>
<span class="line"><span>0000 0111 1111 1111 1111 1111 1111 1111 // n | (n &gt;&gt;&gt; 16)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过右移运算和或运算，可以把后面都填充为1。</p>`,32)]))}const r=i(l,[["render",t]]),c=JSON.parse('{"path":"/posts/nearest-power-2.html","title":"求一个数字最接近的2的N次幂","lang":"zh-CN","frontmatter":{"category":["算法"],"tag":["位运算"],"date":"2023-10-12T00:00:00.000Z","description":"求一个数字最接近的2的N次幂 给定一个正整数n，现有正整数x，x满足以下条件： x >= n x 是 2的N次幂 求x的最小值。 例如： JDK8的HashMap中的实现 HashMap会把构造函数中用户输入的capacity向上取到最接近的2的n次幂。 Java移位运算符解释 左移运算符：<< 丢弃左边指定位数，右边补0。 右移运算符：>> 丢弃右边...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"求一个数字最接近的2的N次幂\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-13T15:19:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"coldgust\\",\\"url\\":\\"https://github.com/coldgust\\",\\"email\\":\\"zhengxiaojian@apache.org\\"}]}"],["meta",{"property":"og:url","content":"https://coldgust.github.io/posts/nearest-power-2.html"}],["meta",{"property":"og:site_name","content":"coldgust"}],["meta",{"property":"og:title","content":"求一个数字最接近的2的N次幂"}],["meta",{"property":"og:description","content":"求一个数字最接近的2的N次幂 给定一个正整数n，现有正整数x，x满足以下条件： x >= n x 是 2的N次幂 求x的最小值。 例如： JDK8的HashMap中的实现 HashMap会把构造函数中用户输入的capacity向上取到最接近的2的n次幂。 Java移位运算符解释 左移运算符：<< 丢弃左边指定位数，右边补0。 右移运算符：>> 丢弃右边..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-13T15:19:29.000Z"}],["meta",{"property":"article:tag","content":"位运算"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-13T15:19:29.000Z"}]]},"git":{"createdTime":1697041375000,"updatedTime":1697210369000,"contributors":[{"name":"Xiaojian Zheng","username":"","email":"zhengxiaojian@apache.org","commits":2}]},"readingTime":{"minutes":3.69,"words":554},"filePathRelative":"posts/nearest-power-2.md","excerpt":"\\n<p>给定一个正整数<code>n</code>，现有正整数<code>x</code>，<code>x</code>满足以下条件：</p>\\n<ul>\\n<li><code>x</code> &gt;= <code>n</code></li>\\n<li><code>x</code> 是 2的N次幂</li>\\n</ul>\\n<p>求<code>x</code>的最小值。</p>\\n<p>例如：</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-text\\"><span class=\\"line\\"><span>input: n = 6</span></span>\\n<span class=\\"line\\"><span>output: 8</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>input: n = 8</span></span>\\n<span class=\\"line\\"><span>output: 8</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>input: n = 20</span></span>\\n<span class=\\"line\\"><span>output: 32</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,c as data};
